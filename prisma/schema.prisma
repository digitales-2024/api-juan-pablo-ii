generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @unique @default(uuid())
  name               String
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean  @default(false)
  lastLogin          DateTime @default(now()) @db.Timestamptz(6)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  // Relación con UserRol
  userRols UserRol[] @relation("UserId")

  @@unique([email, isActive])
}

model Rol {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con UserRol
  rolUsers UserRol[] @relation("RolId")

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id       String  @id @unique @default(uuid())
  user     User    @relation("UserId", fields: [userId], references: [id])
  userId   String
  isActive Boolean @default(true)
  rol      Rol     @relation("RolId", fields: [rolId], references: [id])
  rolId    String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId])
}

model Permission {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  permissionModule ModulePermissions[] @relation("PermissionId")

  @@unique([cod, name])
}

model Module {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  modulePermissions ModulePermissions[] @relation("ModuleId")

  @@unique([cod, name])
}

model ModulePermissions {
  id           String     @id @unique @default(uuid())
  module       Module     @relation("ModuleId", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  permission   Permission @relation("PermissionId", fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("ModulePermissionsId")

  @@unique([moduleId, permissionId])
}

model RolModulePermissions {
  id                  String            @id @unique @default(uuid())
  rol                 Rol               @relation("RolId", fields: [rolId], references: [id], onDelete: Cascade)
  rolId               String
  modulePermissions   ModulePermissions @relation("ModulePermissionsId", fields: [modulePermissionsId], references: [id], onDelete: Cascade)
  modulePermissionsId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([rolId, modulePermissionsId])
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//tabla de cliente
model Client {
  id         String  @id @unique @default(uuid())
  name       String
  rucDni     String  @unique
  address    String
  province   String
  department String
  phone      String?
  isActive   Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  // OrdenCompra OrdenCompra[]
}

// tabla pacientes que va a ser usuarios
model Patient {
  id                     String  @id @unique @default(uuid())
  name                   String
  lastName               String?
  dni                    String  @unique
  birthDate              String? @db.VarChar(20)
  gender                 Boolean
  address                String? @db.VarChar(255)
  phone                  String? @db.VarChar(15)
  email                  String? @db.VarChar(100)
  registrationDate       String  @db.VarChar(20)
  allergies              String? @db.Text
  currentMedications     String? @db.Text
  emergencyContact       String? @db.VarChar(100)
  emergencyPhone         String? @db.VarChar(15)
  healthInsurance        String? @db.VarChar(100)
  maritalStatus          String? @db.VarChar(20)
  occupation             String? @db.VarChar(100)
  workplace              String? @db.VarChar(255)
  bloodType              String? @db.VarChar(3)
  familyHistory          String? @db.Text
  lifestyleHabits        String? @db.Text
  vaccinations           Json?
  primaryDoctor          String? @db.VarChar(100)
  language               String? @db.VarChar(50)
  treatmentAuthorization String? @db.VarChar(255)
  notes                  String? @db.Text
  patientPhoto           String? @db.Text

  //no tocar
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  MedicalHistory MedicalHistory[]
  Appointment    Appointment[]
}

//tabla tipo de servicio
model ServiceType {
  id          String    @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean   @default(true)
  services    Service[] // Relación inversa con Service
  createdAt   DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime  @updatedAt
}

//tabla servicios
model Service {
  id            String      @id @unique @default(uuid())
  name          String
  description   String?
  price         Float
  serviceTypeId String
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  isActive      Boolean     @default(true)

  appointments Appointment[] // Agregar esta relación

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla tipo de personal
model StaffType {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  staff     Staff[] // Relación con Staff
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Staff {
  id           String          @id @default(uuid())
  staffTypeId  String
  staffType    StaffType       @relation(fields: [staffTypeId], references: [id])
  userId       String?
  isActive     Boolean         @default(true)
  name         String
  email        String
  phone        String?
  lastName     String
  dni          String          @unique
  birth        DateTime
  branchId     String?
  branch       Branch?         @relation(fields: [branchId], references: [id])
  schedules    StaffSchedule[] // Relación 1:N con horarios
  timeOffs     TimeOff[] // Relación con ausencias
  appointments Appointment[] // Citas asociadas
  events       Event[] // Eventos asociados
  createdAt    DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime        @updatedAt
}

// Tabla Categoria
model Categoria {
  id          String  @id @default(uuid())
  name        String // Nombre de la categoría (ej. 'Medicamentos', 'Cosméticos', 'Materiales', etc.)
  description String? // Descripción opcional que proporciona más detalles sobre la categoría

  isActive  Boolean    @default(true) // Campo para controlar si la categoría está activa o no
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt
  Producto  Producto[] // Relación con la tabla Producto. Un producto puede estar asociado a una categoría.
}

// Tabla TipoProducto
model TipoProducto {
  id          String  @id @default(uuid())
  name        String // Nombre del tipo de producto (subcategoría), como 'Antibióticos', 'Bloqueadores solares', 'Gasas', etc.
  description String? // Descripción opcional del tipo de producto (detalles adicionales o especificaciones)

  isActive  Boolean    @default(true) // Campo para controlar si el tipo de producto está activo o no
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt
  Producto  Producto[] // Relación con la tabla Producto. Un producto puede estar asociado a un tipo de producto específico.
}

// Tabla Producto
model Producto {
  id String @id @default(uuid())

  // Relación con Categoria y TipoProducto
  categoriaId    String
  categoria      Categoria    @relation(fields: [categoriaId], references: [id])
  tipoProductoId String
  tipoProducto   TipoProducto @relation(fields: [tipoProductoId], references: [id])

  // Información básica del producto
  name                      String // Nombre del producto (ej. 'Paracetamol', 'Protector solar', 'Gasas estériles', etc.)
  precio                    Float // Precio de venta del producto (sin descuentos)
  unidadMedida              String? // Unidad de medida (ml, kg, caja, etc.)
  proveedor                 String? // Fabricante o proveedor
  uso                       String? // Paciente, cliente, personal, etc.
  usoProducto               String? // Venta, uso interno, etc.
  description               String? // 
  codigoProducto            String? // Código de barras o código único del producto
  descuento                 Float? // Descuento aplicado, si aplica
  observaciones             String? // Observaciones adicionales
  condicionesAlmacenamiento String? // Condiciones de almacenamiento (ej. "refrigerar")
  isActive                  Boolean @default(true)
  imagenUrl                 String? // URL de la imagen del producto

  // Fechas de control
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con el inventario (Almacen)
  Movement Movement[]
  Stock    Stock[]
}

model TypeStorage {
  id          String   @id @default(uuid())
  name        String // Ejemplo: "Producto Terminado", "Materia Prima", etc.
  description String? // Descripción opcional del tipo de almacén
  branchId    String? // Clave foránea a Sucursal o local
  staffId     String? // Clave foránea a Personal empleado responsable del almacén
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Storage Storage[] // Relación con la tabla Almacen
}

//tabla almacen
model Storage {
  id            String      @id @default(uuid())
  name          String // Nombre del almacén
  location      String? // Ubicación física del almacén
  typeStorageId String
  TypeStorage   TypeStorage @relation(fields: [typeStorageId], references: [id]) // Relación con TipoAlmacen
  Incoming      Incoming[] // Relación con Ingreso
  Outgoing      Outgoing[] // Relación con Salida
  isActive      Boolean     @default(true) // Campo para controlar si está activo o no
  createdAt     DateTime    @default(now()) @db.Timestamptz(6)
  updatedAt     DateTime    @updatedAt
  Stock         Stock[]
}

model Stock {
  id        String  @id @default(uuid())
  storageId String // Relación con Storage
  Storage   Storage @relation(fields: [storageId], references: [id])

  productId String // Relación con Producto
  Producto  Producto @relation(fields: [productId], references: [id])

  stock     Float    @default(0) // Cantidad del producto en el almacén
  price     Float    @default(0) // Precio de venta del producto en el almacén
  isActive  Boolean  @default(true) // Control de registros activos
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([storageId, productId]) // Evitar duplicados de un producto en el mismo almacén
}

//tabla tipo movimiento
model MovementType {
  id          String     @id @default(uuid())
  orderId     String?
  Order       Order?     @relation(fields: [orderId], references: [id])
  referenceId String? // Referencia a un registro etc
  name        String? // venta, compra, devolución, etc.
  description String? // Descripción opcional del tipo de movimiento
  state       Boolean    @default(false) // Estado que controla si el flujo se concreta o no (false = no afecta al stock)
  isIncoming  Boolean? // Booleano para identificar si es un "Ingreso" o "Salida"
  tipoExterno String? // Puede ser "Venta", "Compra", "Devolución", etc.
  isActive    Boolean    @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt
  Movement    Movement[]
}

// tabla movimientos
model Movement {
  id             String        @id @default(uuid())
  movementTypeId String?
  MovementType   MovementType? @relation(fields: [movementTypeId], references: [id])
  incomingId     String?
  Incoming       Incoming?     @relation(fields: [incomingId], references: [id])
  outgoingId     String?
  Outgoing       Outgoing?     @relation(fields: [outgoingId], references: [id])
  productId      String
  Producto       Producto      @relation(fields: [productId], references: [id])
  quantity       Float // Cantidad de producto que se movió
  date           DateTime      @default(now()) @db.Timestamptz(6)
  state          Boolean       @default(false) // Estado para registrar si el movimiento ha sido procesado o no
  referenceId    String? // Referencia a un registro etc
  isActive       Boolean       @default(true) // Campo para controlar si está activo o no
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt
}

//tabla ingresos 
model Incoming {
  id          String   @id @default(uuid())
  name        String?
  description String?
  storageId   String
  Storage     Storage  @relation(fields: [storageId], references: [id])
  date        DateTime @default(now()) @db.Timestamptz(6)
  state       Boolean  @default(false) // Estado que indica si el ingreso es concreto (true) o está en proceso (false)
  referenceId String? // Referencia a un registro etc
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Movement Movement[] // Relación con Movimiento
}

//tabla salidas
model Outgoing {
  id          String   @id @default(uuid())
  name        String?
  description String?
  storageId   String
  Storage     Storage  @relation(fields: [storageId], references: [id])
  date        DateTime @default(now()) @db.Timestamptz(6)
  state       Boolean  @default(false) // Estado que indica si la salida es concreta (true) o está en proceso (false)
  referenceId String? // Referencia a un registro etc
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Movement Movement[] // Relación con Movimiento
}

// MedicalHistory table
model MedicalHistory {
  id             String   @id @default(uuid())
  patientId      String
  patient        Patient  @relation(fields: [patientId], references: [id])
  medicalHistory Json? // Historial médico del paciente
  description    String?
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime @updatedAt

  UpdateHistory UpdateHistory[]
}

// UpdateHistory table
model UpdateHistory {
  id                    String         @id @default(uuid())
  serviceId             String
  staffId               String // ID del personal que realiza la actualización
  branchId              String // ID de la sucursal donde se realiza la actualización
  medicalHistoryId      String // ID del historial médico al que se hace referencia
  medicalHistory        MedicalHistory @relation(fields: [medicalHistoryId], references: [id])
  prescription          Boolean        @default(false) // Indica si la actualización tiene una receta medica adjunta
  prescriptionId        String? // ID de la receta médica asociada si el valor es true
  updateHistory         Json? // Historial de actualizaciones
  description           String?
  medicalLeave          Boolean        @default(false) // indica si tiene descanso medico
  medicalLeaveStartDate DateTime?
  medicalLeaveEndDate   DateTime?
  medicalLeaveDays      Int? // Cantidad de días de descanso médico
  leaveDescription      String? // Descripción del descanso médico
  isActive              Boolean        @default(true)
  createdAt             DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt             DateTime       @updatedAt
  Prescription          Prescription[]
  // Relación con la tabla de ImagePatient
  ImagePatient          ImagePatient[]
}

model ImagePatient {
  id              String         @id @default(uuid())
  updateHistoryId String?
  patientId       String?
  imageUrl        String?
  UpdateHistory   UpdateHistory? @relation(fields: [imageUrl], references: [id])
  phothography    Boolean        @default(false)
  isActive        Boolean        @default(true)
  createdAt       DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt       DateTime       @updatedAt
}

// Prescription table
model Prescription {
  // Identification fields
  id String @id @default(uuid()) // Unique ID of the prescription

  // Relationships and references
  updateHistoryId String // ID of the medical history update
  updateHistory   UpdateHistory @relation(fields: [updateHistoryId], references: [id])
  branchId        String // ID of the branch where it is issued
  staffId         String // ID of the medical staff issuing it
  patientId       String // ID of the patient

  // Main data
  registrationDate DateTime // Date of prescription issuance
  prescription     Json // detalles de la prescripción (medicamentos, dosis, etc.)
  description      String? // Additional description or notes (optional)
  purchaseOrderId  String? // referecia a orden de compra (optional)
}

 enum AppointmentStatus {
  PENDING

  //TODO: ver que estados tendran las citas
}
  // Audit fields
 

enum DayOfWeek {
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
  SATURDAY
  SUNDAY
}

enum AppointmentType {
  CONSULTA
  OTRO
}

model Appointment {
  id        String            @id @default(uuid())
  eventId   String?          @unique
  event     Event?           @relation(name: "AppointmentToEvent", fields: [eventId], references: [id])
  staffId   String
  serviceId String
  branchId  String
  patientId String
  start     DateTime
  end       DateTime
  status    AppointmentStatus @default(PENDING)
  type      AppointmentType   @default(CONSULTA)
  notes     String?

  // Relaciones
  staff    Staff    @relation(fields: [staffId], references: [id])
  service  Service  @relation(fields: [serviceId], references: [id])
  branch   Branch   @relation(fields: [branchId], references: [id])
  patient  Patient  @relation(fields: [patientId], references: [id])

  // Campos de auditoría
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId, start])
  @@index([patientId, start])
}

enum EventType {
  TURNO
  CITA
  OTRO
}

enum EventStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  NO_SHOW
}

model Event {
  id                 String         @id @default(uuid())
  title              String
  type               EventType      @default(TURNO)
  start              DateTime
  end                DateTime
  color              String? // Color dinámico basado en el estado
  status             EventStatus? // Estado del evento (refleja el estado de la cita)
  isActive Boolean @default(true)
  isCancelled        Boolean        @default(false)
  cancellationReason String?
  staffScheduleId    String?
  staffSchedule      StaffSchedule? @relation(fields: [staffScheduleId], references: [id])
  staffId            String
  staff              Staff          @relation(fields: [staffId], references: [id])
  branchId           String
  branch             Branch         @relation(fields: [branchId], references: [id])
  appointment        Appointment?   @relation(name: "AppointmentToEvent") // Relación 1:1
  createdAt          DateTime       @default(now())
  updatedAt          DateTime       @updatedAt

  @@index([staffId, branchId, start])
}

model TimeOff {
  id        String   @id @default(uuid())
  staffId   String
  branchId  String
  start     DateTime // Inicio de la ausencia
  end       DateTime // Fin de la ausencia
  reason    String? // Motivo de la ausencia
  isActive  Boolean  @default(true)
  staff     Staff    @relation(fields: [staffId], references: [id])
  branch    Branch   @relation(fields: [branchId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([staffId, start])
}

enum RecurrenceFrequency {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model StaffSchedule {
  id         String      @id @default(uuid())
  staffId    String
  branchId   String
  title      String      @default("Turno") // Ej: "Turno Mañana"
  startTime  String // Formato "HH:mm" (08:00)
  endTime    String // Formato "HH:mm" (17:00)
  daysOfWeek DayOfWeek[] // Días de aplicación
  recurrence Json // { frequency: "WEEKLY", interval: 1, until: "2024-12-31" }
  exceptions DateTime[] // Fechas excluidas
  isActive   Boolean     @default(true)
  events     Event[] // Eventos generados
  staff      Staff       @relation(fields: [staffId], references: [id])
  branch     Branch      @relation(fields: [branchId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  @@index([staffId, branchId])
}

//tabla sucursal
model Branch {
  id       String  @id @default(uuid())
  name     String
  address  String
  phone    String?
  isActive Boolean @default(true)

  createdAt      DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime        @updatedAt
  staffSchedules StaffSchedule[]
  appointments   Appointment[]
  events         Event[]
  staff          Staff[]
  timeOffs       TimeOff[]
}

enum OrderType {
  MEDICAL_PRESCRIPTION_ORDER
  MEDICAL_CONSULTATION_ORDER
  PRODUCT_SALE_ORDER
  PRODUCT_PURCHASE_ORDER
}

enum OrderStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

model Order {
  id             String      @id @default(uuid())
  code           String?
  type           OrderType
  movementTypeId String?
  referenceId    String? // ID of related prescription or consultation
  sourceId       String? // ID de la entidad origen (paciente, etc)
  targetId       String? // ID de la entidad destino (doctor, etc)
  status         OrderStatus
  currency       String // default 'PEN'
  subtotal       Float
  tax            Float
  total          Float
  date           DateTime    @default(now()) @db.Timestamptz(6)
  notes          String?
  metadata       Json? // Metadata adicional específica del tipo
  isActive       Boolean     @default(true)

  // Relations
  payments  Payment[]      @relation("OrderPayments")
  movements MovementType[]

  // Audit fields
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  order         Order         @relation("OrderPayments", fields: [orderId], references: [id])
  date          DateTime      @default(now()) @db.Timestamptz(6)
  status        PaymentStatus
  type          PaymentType   @default(REGULAR)
  amount        Float
  description   String?
  paymentMethod PaymentMethod // CASH, TRANSFER, YAPE
  voucherNumber String? // Número de comprobante/operación
  verifiedBy    String? // ID del usuario que verificó
  verifiedAt    DateTime? // Cuándo se verificó
  isActive      Boolean       @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  YAPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

enum PaymentType {
  REGULAR
  REFUND
  PARTIAL
  ADJUSTMENT
  COMPENSATION
}
