generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @unique @default(uuid())
  name               String
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean  @default(false)
  lastLogin          DateTime @default(now()) @db.Timestamptz(6)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  // Relación con UserRol
  userRols UserRol[] @relation("UserId")

  @@unique([email, isActive])
}

model Rol {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con UserRol
  rolUsers UserRol[] @relation("RolId")

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id       String  @id @unique @default(uuid())
  user     User    @relation("UserId", fields: [userId], references: [id])
  userId   String
  isActive Boolean @default(true)
  rol      Rol     @relation("RolId", fields: [rolId], references: [id])
  rolId    String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId])
}

model Permission {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  permissionModule ModulePermissions[] @relation("PermissionId")

  @@unique([cod, name])
}

model Module {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  modulePermissions ModulePermissions[] @relation("ModuleId")

  @@unique([cod, name])
}

model ModulePermissions {
  id           String     @id @unique @default(uuid())
  module       Module     @relation("ModuleId", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  permission   Permission @relation("PermissionId", fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("ModulePermissionsId")

  @@unique([moduleId, permissionId])
}

model RolModulePermissions {
  id                  String            @id @unique @default(uuid())
  rol                 Rol               @relation("RolId", fields: [rolId], references: [id], onDelete: Cascade)
  rolId               String
  modulePermissions   ModulePermissions @relation("ModulePermissionsId", fields: [modulePermissionsId], references: [id], onDelete: Cascade)
  modulePermissionsId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([rolId, modulePermissionsId])
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//tabla de clientes
model Client {
  id         String  @id @unique @default(uuid())
  name       String
  rucDni     String  @unique
  address    String
  province   String
  department String
  phone      String?
  isActive   Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

// tabla pacientes que va a ser usuarios
model Patient {
  id       String @id @unique @default(uuid())
  name     String
  lastName String
  dni      String @unique
  birth    String

  createdAt          DateTime             @default(now()) @db.Timestamptz(6)
  updatedAt          DateTime             @updatedAt
  History            History[]
  MedicalAppointment MedicalAppointment[]
  Sale               Sale[]
}

//tabla tipo de servicio
model ServiceType {
  id          String  @id @unique @default(uuid())
  name        String
  description String?

  services Service[] // Relación inversa con Service

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla servicios
model Service {
  id            String      @id @unique @default(uuid())
  name          String
  description   String?
  price         Float
  serviceTypeId String // Clave foránea a ServiceType
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  isActive      Boolean     @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla especialidad
model Specialty {
  id          String  @id @unique @default(uuid())
  name        String
  description String?

  doctors Doctor[] // Relación con Doctor

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla medicos que van a ser usuarios
model Doctor {
  id          String    @id @unique @default(uuid())
  name        String
  lastName    String
  dni         String    @unique
  birth       String
  specialtyId String // Clave foránea a Specialty
  specialty   Specialty @relation(fields: [specialtyId], references: [id])

  scheduleDays ScheduleDay[] // Relación con ScheduleDay

  History History[] // Relación con ScheduleDay

  MedicalAppointment MedicalAppointment[] // Relación con MedicalAppointment

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla horario
model Schedule {
  id        String  @id @unique @default(uuid())
  day       String
  startHour String
  endHour   String
  isActive  Boolean @default(true)

  scheduleDays ScheduleDay[] // Relación con ScheduleDay

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla cronograma
model ScheduleDay {
  id         String   @id @unique @default(uuid())
  day        String
  doctorId   String
  doctor     Doctor   @relation(fields: [doctorId], references: [id])
  scheduleId String
  schedule   Schedule @relation(fields: [scheduleId], references: [id])

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla tipoProducto
model ProductType {
  id          String  @id @default(uuid())
  name        String
  description String?

  products Product[] // Relación con Product

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla producto
model Product {
  id            String      @id @default(uuid())
  name          String
  description   String?
  productTypeId String
  productType   ProductType @relation(fields: [productTypeId], references: [id])

  entries Entry[] // Relación con Entry
  outputs Output[] // Relación con Output

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla almacen
model Warehouse {
  id       String  @id @default(uuid())
  name     String
  location String?

  entries Entry[] // Relación con Entry
  outputs Output[] // Relación con Output

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla ingresos
model Entry {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  quantity    Int
  date        DateTime  @default(now()) @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla salidas
model Output {
  id          String    @id @default(uuid())
  productId   String
  product     Product   @relation(fields: [productId], references: [id])
  warehouseId String
  warehouse   Warehouse @relation(fields: [warehouseId], references: [id])
  quantity    Int
  date        DateTime  @default(now()) @db.Timestamptz(6)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla historias
model History {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  date        DateTime
  description String

  medicalPrescriptions MedicalPrescription[] // Relación con MedicalPrescription

  MedicalConsultation MedicalConsultation[] // Relación con MedicalConsultation

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla recetas medicas
model MedicalPrescription {
  id          String  @id @default(uuid())
  historyId   String
  history     History @relation(fields: [historyId], references: [id])
  description String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla sucursal
model Branch {
  id       String  @id @default(uuid())
  name     String
  address  String
  phone    String?
  isActive Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla consultas medicas
model MedicalConsultation {
  id        String @id @default(uuid())
  historyId String

  history History  @relation(fields: [historyId], references: [id])
  date    DateTime

  description String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla citas medicas
model MedicalAppointment {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  doctorId    String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  date        DateTime
  description String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla venta
model Sale {
  id          String   @id @default(uuid())
  patientId   String
  patient     Patient  @relation(fields: [patientId], references: [id])
  date        DateTime
  total       Float
  description String?

  Payment Payment[] // Relación con MedicalConsultation

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla pago
model Payment {
  id          String   @id @default(uuid())
  saleId      String
  sale        Sale     @relation(fields: [saleId], references: [id])
  date        DateTime
  amount      Float
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}
