generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @unique @default(uuid())
  name               String
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean  @default(false)
  lastLogin          DateTime @default(now()) @db.Timestamptz(6)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  // Relación con UserRol
  userRols UserRol[] @relation("UserId")

  @@unique([email, isActive])
}

model Rol {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con UserRol
  rolUsers UserRol[] @relation("RolId")

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id       String  @id @unique @default(uuid())
  user     User    @relation("UserId", fields: [userId], references: [id])
  userId   String
  isActive Boolean @default(true)
  rol      Rol     @relation("RolId", fields: [rolId], references: [id])
  rolId    String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId])
}

model Permission {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  permissionModule ModulePermissions[] @relation("PermissionId")

  @@unique([cod, name])
}

model Module {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  modulePermissions ModulePermissions[] @relation("ModuleId")

  @@unique([cod, name])
}

model ModulePermissions {
  id           String     @id @unique @default(uuid())
  module       Module     @relation("ModuleId", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  permission   Permission @relation("PermissionId", fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("ModulePermissionsId")

  @@unique([moduleId, permissionId])
}

model RolModulePermissions {
  id                  String            @id @unique @default(uuid())
  rol                 Rol               @relation("RolId", fields: [rolId], references: [id], onDelete: Cascade)
  rolId               String
  modulePermissions   ModulePermissions @relation("ModulePermissionsId", fields: [modulePermissionsId], references: [id], onDelete: Cascade)
  modulePermissionsId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([rolId, modulePermissionsId])
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//tabla de cliente
model Client {
  id         String  @id @unique @default(uuid())
  name       String
  rucDni     String  @unique
  address    String
  province   String
  department String
  phone      String?
  isActive   Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  // OrdenCompra OrdenCompra[]
}

// tabla pacientes que va a ser usuarios
model Paciente {
  id                      String  @id @unique @default(uuid())
  nombre                  String
  apellido                String?
  dni                     String  @unique
  cumpleanos              String? @db.VarChar(20)
  sexo                    Boolean
  direccion               String? @db.VarChar(255)
  telefono                String? @db.VarChar(15)
  correo                  String? @db.VarChar(100)
  fechaRegistro           String  @db.VarChar(20)
  alergias                String? @db.Text
  medicamentosActuales    String? @db.Text
  contactoEmergencia      String? @db.VarChar(100)
  telefonoEmergencia      String? @db.VarChar(15)
  seguroMedico            String? @db.VarChar(100)
  estadoCivil             String? @db.VarChar(20)
  ocupacion               String? @db.VarChar(100)
  lugarTrabajo            String? @db.VarChar(255)
  tipoSangre              String? @db.VarChar(3)
  antecedentesFamiliares  String? @db.Text
  habitosVida             String? @db.Text
  vacunas                 Json?
  medicoCabecera          String? @db.VarChar(100)
  idioma                  String? @db.VarChar(50)
  autorizacionTratamiento String? @db.VarChar(255)
  observaciones           String? @db.Text
  fotografiaPaciente      String? @db.Text

  //no tocar
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  HistoriaMedica HistoriaMedica[]
  ConsultaMedica ConsultaMedica[]
}

//tabla tipo de servicio
model ServiceType {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  services Service[] // Relación inversa con Service

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla servicios
model Service {
  id            String      @id @unique @default(uuid())
  name          String
  description   String?
  price         Float
  serviceTypeId String // Clave foránea a ServiceType
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  isActive      Boolean     @default(true)

  ConsultaMedica ConsultaMedica[] // Relación con ConsultaMedica

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla especialidad
model Especialidad {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  personal Personal[] // Relación con Personal

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla medicos que van a ser usuarios
model Personal {
  id String @id @unique @default(uuid())

  especialidadId String // Clave foránea a especialidad
  especialidad   Especialidad @relation(fields: [especialidadId], references: [id])

  userId String? // Clave foránea a user

  isActive Boolean @default(true)
  name     String
  email    String
  phone    String?
  lastName String
  dni      String  @unique
  birth    String

  calendario Calendario[] // Relación con Calendario

  CitaMedica CitaMedica[] // Relación con CitaMedica

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Calendario {
  id         String   @id @default(uuid())
  personalId String
  personal   Personal @relation(fields: [personalId], references: [id])
  sucursalId String
  nombre     String // Nombre descriptivo del calendario (ej: "Horario Normal", "Horario Verano")
  color      String? // Color para identificar visualmente el calendario
  isDefault  Boolean  @default(false) // Indica si es el calendario principal del empleado
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt

  eventos     Evento[] // Eventos asociados al calendario
  recurrencia Recurrencia[] // Reglas de recurrencia
}

model Evento {
  id           String     @id @default(uuid())
  calendarioId String
  calendario   Calendario @relation(fields: [calendarioId], references: [id])
  titulo       String // Título del evento (ej: "Ingreso", "Almuerzo", "Salida")
  descripcion  String? // Descripción opcional del evento
  fechaInicio  String // Fecha y hora de inicio del evento
  fechaFin     String // Fecha y hora de fin del evento
  todoElDia    Boolean    @default(false) // Indica si el evento dura todo el día
  tipo         String // INGRESO, SALIDA, ALMUERZO, DESCANSO, PERMISO
  color        String? // Color específico para este evento

  // Campos específicos para permisos
  esPermiso     Boolean @default(false)
  tipoPermiso   String? // MEDICO, PERSONAL, VACACIONES, etc.
  estadoPermiso String? // PENDIENTE, APROBADO, RECHAZADO

  // Campos de control
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Recurrencia {
  id           String     @id @default(uuid())
  calendarioId String
  calendario   Calendario @relation(fields: [calendarioId], references: [id])

  // Reglas de recurrencia
  frecuencia  String // DIARIA, SEMANAL, MENSUAL, ANUAL
  intervalo   Int // Cada cuántas unidades de frecuencia se repite 1
  fechaInicio DateTime // Cuándo comienza la recurrencia
  fechaFin    DateTime? // Cuándo termina la recurrencia (opcional)

  // Campos de control
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla tipoProducto
model TipoProducto {
  id          String  @id @default(uuid())
  name        String
  description String?

  Producto Producto[] // Relación con Product

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla producto
model Producto {
  id             String       @id @default(uuid())
  name           String
  description    String?
  //relacion con tipo de producto
  tipoProductoId String
  tipoProducto   TipoProducto @relation(fields: [tipoProductoId], references: [id])

  createdAt DateTime  @default(now()) @db.Timestamptz(6)
  updatedAt DateTime  @updatedAt
  Almacen   Almacen[]
}

//tabla almacen
model Almacen {
  id         String   @id @default(uuid())
  //relacion con producto
  productoId String
  Producto   Producto @relation(fields: [productoId], references: [id])
  name       String
  location   String?

  ingreso Ingreso[] // Relación con Ingreso
  salida  Salida[] // Relación con Salida

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla tipo movimiento
model TipoMovimiento {
  id            String @id @default(uuid())
  //relacion con la tabla ondenCompra
  ordenCompraId String
  OrdenCompra   Order  @relation(fields: [ordenCompraId], references: [id])

  name        String
  description String?

  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt
  Movimiento Movimiento[]
}

// tabla movimientos
model Movimiento {
  id String @id @default(uuid())

  //relacion con la tabla Ingreso
  ingresoId String
  Ingreso   Ingreso @relation(fields: [ingresoId], references: [id])

  //relacion con la tabla Salida
  salidaId String
  Salida   Salida @relation(fields: [salidaId], references: [id])

  quantity Int
  date     DateTime @default(now()) @db.Timestamptz(6)

  createdAt        DateTime        @default(now()) @db.Timestamptz(6)
  updatedAt        DateTime        @updatedAt
  TipoMovimiento   TipoMovimiento? @relation(fields: [tipoMovimientoId], references: [id])
  tipoMovimientoId String?
}

//tabla ingresos
model Ingreso {
  id        String   @id @default(uuid())
  almacenId String
  almacen   Almacen  @relation(fields: [almacenId], references: [id])
  quantity  Int
  date      DateTime @default(now()) @db.Timestamptz(6)

  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt
  Movimiento Movimiento[]
}

//tabla salidas
model Salida {
  id String @id @default(uuid())

  almacenId String
  almacen   Almacen  @relation(fields: [almacenId], references: [id])
  quantity  Int
  date      DateTime @default(now()) @db.Timestamptz(6)

  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt
  Movimiento Movimiento[]
}

//tabla historias
model HistoriaMedica {
  id             String   @id @default(uuid())
  pacienteId     String
  paciente       Paciente @relation(fields: [pacienteId], references: [id])
  historiaMedica Json
  date           DateTime
  description    String?

  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  UpdateHistoria UpdateHistoria[]
}

//tabla actualizacion ala historia
model UpdateHistoria {
  id               String         @id @default(uuid())
  consultaMedicaId String
  personalId       String
  sucursalId       String
  historiaMedicaId String
  historiaMedica   HistoriaMedica @relation(fields: [historiaMedicaId], references: [id])
  receta           Boolean        @default(false)
  recetaMedicaId   String?
  fecha            DateTime
  updateHistoria   Json
  description      String?
  descansoMedico   Boolean        @default(false)
  descripDescanso  String?

  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt
  RecetaMedica RecetaMedica[]
}

//tabla recetas medicas
model RecetaMedica {
  // Campos de identificación
  id String @id @default(uuid()) // ID único de la receta

  // Relaciones y referencias
  updateHistoriaId String // ID de la actualización de historia médica
  UpdateHistoria   UpdateHistoria @relation(fields: [updateHistoriaId], references: [id])
  sucursalId       String // ID de la sucursal donde se emite
  personalId       String // ID del personal médico que emite
  pacienteId       String // ID del paciente

  // Datos principales
  fechaRegistro DateTime // Fecha de emisión de la receta
  receta        Json // Detalle de medicamentos y dosificación
  description   String? // Descripción o notas adicionales (opcional)
  ordenCompraId String? // Referencia a orden de compra (opcional)

  // Campos de auditoría
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla sucursal
model Sucursal {
  id       String  @id @default(uuid())
  name     String
  address  String
  phone    String?
  isActive Boolean @default(true)

  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  ConsultaMedica ConsultaMedica[] // Relación con ConsultaMedica
}

//tabla consultas medicas
model ConsultaMedica {
  id         String   @id @default(uuid())
  //realcion tabla servicios
  serviceId  String
  Service    Service  @relation(fields: [serviceId], references: [id])
  //realcion tabla paciente
  pacienteId String
  paciente   Paciente @relation(fields: [pacienteId], references: [id])
  //realcion tabla sucursal
  sucursalId String
  Sucursal   Sucursal @relation(fields: [sucursalId], references: [id])

  description String
  date        DateTime
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  CitaMedica CitaMedica[] // Relación con CitaMedica
  // OrdenCompra OrdenCompra[] // Relación con OrdenCompra
}

//tabla tipo de citasMedicas
model TipoCitaMedica {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt
  CitaMedica CitaMedica[]
}

//tabla citas medicas
model CitaMedica {
  id               String         @id @default(uuid())
  //relacion con tipo de cita medica
  tipoCitaMedicaId String
  TipoCitaMedica   TipoCitaMedica @relation(fields: [tipoCitaMedicaId], references: [id])
  //relacion con personal
  personalId       String
  personal         Personal       @relation(fields: [personalId], references: [id])
  //relacion con consulta medica
  consultaId       String
  ConsultaMedica   ConsultaMedica @relation(fields: [consultaId], references: [id])

  date        DateTime
  description String

  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @updatedAt
  ProcedimientoMedico ProcedimientoMedico[]
}

//tabla ProcedimientoMedico
model ProcedimientoMedico {
  id           String     @id @default(uuid())
  //relacion con cita medica
  citaMedicaId String
  CitaMedica   CitaMedica @relation(fields: [citaMedicaId], references: [id])
  name         String
  description  String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Order {
  id          String           @id @default(uuid())
  type        String? // MEDICAL_PRESCRIPTION, MEDICAL_CONSULTATION, etc.
  referenceId String? // ID of related prescription or consultation
  status      String // PENDING, PAID, CANCELLED, etc.
  details     Json // Specific details according to type
  products    Json? // Array of products (optional)
  services    Json? // Array of services (optional)
  total       Float
  date        DateTime
  description String?
  // Relations
  payments    Payment[]        @relation("OrderPayments")
  movements   TipoMovimiento[]
  // Audit fields
  createdAt   DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime         @updatedAt
}

model Payment {
  id          String   @id @default(uuid())
  orderId     String
  order       Order    @relation("OrderPayments", fields: [orderId], references: [id])
  date        DateTime
  amount      Float
  description String?
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt
}
