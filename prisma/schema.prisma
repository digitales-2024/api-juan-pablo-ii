generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                 String   @id @unique @default(uuid())
  name               String
  email              String
  password           String
  phone              String?
  isSuperAdmin       Boolean  @default(false)
  lastLogin          DateTime @default(now()) @db.Timestamptz(6)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con auditorías (acciones realizadas por este usuario)
  auditsPerformed Audit[] @relation("AuditPerformedBy")

  // Relación con UserRol
  userRols UserRol[] @relation("UserId")

  @@unique([email, isActive])
}

model Rol {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con UserRol
  rolUsers UserRol[] @relation("RolId")

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("RolId")

  @@unique([name, isActive])
}

model UserRol {
  id       String  @id @unique @default(uuid())
  user     User    @relation("UserId", fields: [userId], references: [id])
  userId   String
  isActive Boolean @default(true)
  rol      Rol     @relation("RolId", fields: [rolId], references: [id])
  rolId    String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([userId, rolId])
}

model Permission {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  permissionModule ModulePermissions[] @relation("PermissionId")

  @@unique([cod, name])
}

model Module {
  id          String  @id @unique @default(uuid())
  cod         String
  name        String
  description String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con ModulePermissions
  modulePermissions ModulePermissions[] @relation("ModuleId")

  @@unique([cod, name])
}

model ModulePermissions {
  id           String     @id @unique @default(uuid())
  module       Module     @relation("ModuleId", fields: [moduleId], references: [id], onDelete: Cascade)
  moduleId     String
  permission   Permission @relation("PermissionId", fields: [permissionId], references: [id], onDelete: Cascade)
  permissionId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con RolModulePermissions
  rolModulePermissions RolModulePermissions[] @relation("ModulePermissionsId")

  @@unique([moduleId, permissionId])
}

model RolModulePermissions {
  id                  String            @id @unique @default(uuid())
  rol                 Rol               @relation("RolId", fields: [rolId], references: [id], onDelete: Cascade)
  rolId               String
  modulePermissions   ModulePermissions @relation("ModulePermissionsId", fields: [modulePermissionsId], references: [id], onDelete: Cascade)
  modulePermissionsId String

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  @@unique([rolId, modulePermissionsId])
}

model Audit {
  id            String          @id @unique @default(uuid())
  entityId      String
  entityType    String // Representa el nombre del modelo (ej: User, Rol, etc.)
  action        AuditActionType // Representa la acción (CREATE, UPDATE, DELETE)
  performedBy   User            @relation("AuditPerformedBy", fields: [performedById], references: [id])
  performedById String
  createdAt     DateTime        @default(now()) @db.Timestamptz(6)
}

enum AuditActionType {
  CREATE
  UPDATE
  DELETE
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
//tabla de cliente
model Client {
  id         String  @id @unique @default(uuid())
  name       String
  rucDni     String  @unique
  address    String
  province   String
  department String
  phone      String?
  isActive   Boolean @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
  // OrdenCompra OrdenCompra[]
}

// tabla pacientes que va a ser usuarios
model Paciente {
  id                      String  @id @unique @default(uuid())
  nombre                  String
  apellido                String?
  dni                     String  @unique
  cumpleanos              String? @db.VarChar(20)
  sexo                    Boolean
  direccion               String? @db.VarChar(255)
  telefono                String? @db.VarChar(15)
  correo                  String? @db.VarChar(100)
  fechaRegistro           String  @db.VarChar(20)
  alergias                String? @db.Text
  medicamentosActuales    String? @db.Text
  contactoEmergencia      String? @db.VarChar(100)
  telefonoEmergencia      String? @db.VarChar(15)
  seguroMedico            String? @db.VarChar(100)
  estadoCivil             String? @db.VarChar(20)
  ocupacion               String? @db.VarChar(100)
  lugarTrabajo            String? @db.VarChar(255)
  tipoSangre              String? @db.VarChar(3)
  antecedentesFamiliares  String? @db.Text
  habitosVida             String? @db.Text
  vacunas                 Json?
  medicoCabecera          String? @db.VarChar(100)
  idioma                  String? @db.VarChar(50)
  autorizacionTratamiento String? @db.VarChar(255)
  observaciones           String? @db.Text
  fotografiaPaciente      String? @db.Text

  //no tocar
  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  HistoriaMedica HistoriaMedica[]
  ConsultaMedica ConsultaMedica[]
}

//tabla tipo de servicio
model ServiceType {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  services Service[] // Relación inversa con Service

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla servicios
model Service {
  id            String      @id @unique @default(uuid())
  name          String
  description   String?
  price         Float
  serviceTypeId String // Clave foránea a ServiceType
  serviceType   ServiceType @relation(fields: [serviceTypeId], references: [id])
  isActive      Boolean     @default(true)

  ConsultaMedica ConsultaMedica[] // Relación con ConsultaMedica

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla especialidad
model Especialidad {
  id          String  @id @unique @default(uuid())
  name        String
  description String?
  isActive    Boolean @default(true)

  personal Personal[] // Relación con Personal

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla medicos que van a ser usuarios
model Personal {
  id String @id @unique @default(uuid())

  especialidadId String // Clave foránea a especialidad
  especialidad   Especialidad @relation(fields: [especialidadId], references: [id])

  userId String? // Clave foránea a user

  isActive Boolean @default(true)
  name     String
  email    String
  phone    String?
  lastName String
  dni      String  @unique
  birth    String

  calendario Calendario[] // Relación con Calendario

  CitaMedica CitaMedica[] // Relación con CitaMedica

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Calendario {
  id         String   @id @default(uuid())
  personalId String
  personal   Personal @relation(fields: [personalId], references: [id])
  sucursalId String
  nombre     String // Nombre descriptivo del calendario (ej: "Horario Normal", "Horario Verano")
  color      String? // Color para identificar visualmente el calendario
  isDefault  Boolean  @default(false) // Indica si es el calendario principal del empleado
  isActive   Boolean  @default(true)
  createdAt  DateTime @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime @updatedAt

  eventos     Evento[] // Eventos asociados al calendario
  recurrencia Recurrencia[] // Reglas de recurrencia
}

model Evento {
  id           String     @id @default(uuid())
  calendarioId String
  calendario   Calendario @relation(fields: [calendarioId], references: [id])
  titulo       String // Título del evento (ej: "Ingreso", "Almuerzo", "Salida")
  descripcion  String? // Descripción opcional del evento
  fechaInicio  String // Fecha y hora de inicio del evento
  fechaFin     String // Fecha y hora de fin del evento
  todoElDia    Boolean    @default(false) // Indica si el evento dura todo el día
  tipo         String // INGRESO, SALIDA, ALMUERZO, DESCANSO, PERMISO
  color        String? // Color específico para este evento

  // Campos específicos para permisos
  esPermiso     Boolean @default(false)
  tipoPermiso   String? // MEDICO, PERSONAL, VACACIONES, etc.
  estadoPermiso String? // PENDIENTE, APROBADO, RECHAZADO

  // Campos de control
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Recurrencia {
  id           String     @id @default(uuid())
  calendarioId String
  calendario   Calendario @relation(fields: [calendarioId], references: [id])

  // Reglas de recurrencia
  frecuencia  String // DIARIA, SEMANAL, MENSUAL, ANUAL
  intervalo   Int // Cada cuántas unidades de frecuencia se repite 1
  fechaInicio DateTime // Cuándo comienza la recurrencia
  fechaFin    DateTime? // Cuándo termina la recurrencia (opcional)

  // Campos de control
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

// Tabla Categoria
model Categoria {
  id          String  @id @default(uuid())
  name        String // Nombre de la categoría (ej. 'Medicamentos', 'Cosméticos', 'Materiales', etc.)
  description String? // Descripción opcional que proporciona más detalles sobre la categoría

  isActive  Boolean    @default(true) // Campo para controlar si la categoría está activa o no
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt
  Producto  Producto[] // Relación con la tabla Producto. Un producto puede estar asociado a una categoría.
}

// Tabla TipoProducto
model TipoProducto {
  id          String  @id @default(uuid())
  name        String // Nombre del tipo de producto (subcategoría), como 'Antibióticos', 'Bloqueadores solares', 'Gasas', etc.
  description String? // Descripción opcional del tipo de producto (detalles adicionales o especificaciones)

  isActive  Boolean    @default(true) // Campo para controlar si el tipo de producto está activo o no
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt
  Producto  Producto[] // Relación con la tabla Producto. Un producto puede estar asociado a un tipo de producto específico.
}

// Tabla Producto
model Producto {
  id String @id @default(uuid())

  // Relación con Categoria y TipoProducto
  categoriaId    String
  categoria      Categoria    @relation(fields: [categoriaId], references: [id])
  tipoProductoId String
  tipoProducto   TipoProducto @relation(fields: [tipoProductoId], references: [id])

  // Información básica del producto
  name                      String // Nombre del producto (ej. 'Paracetamol', 'Protector solar', 'Gasas estériles', etc.)
  precio                    Float // Precio de venta del producto (sin descuentos)
  unidadMedida              String? // Unidad de medida (ml, kg, caja, etc.)
  proveedor                 String? // Fabricante o proveedor
  uso                       String? // Paciente, cliente, personal, etc.
  usoProducto               String? // Venta, uso interno, etc.
  description               String? // 
  codigoProducto            String? // Código de barras o código único del producto
  descuento                 Float? // Descuento aplicado, si aplica
  observaciones             String? // Observaciones adicionales
  condicionesAlmacenamiento String? // Condiciones de almacenamiento (ej. "refrigerar")
  isActive                  Boolean @default(true)
  imagenUrl                 String? // URL de la imagen del producto

  // Fechas de control
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt

  // Relación con el inventario (Almacen)
  Storage  Storage[] // Relación con Almacen (para el inventario)
  Movement Movement[]
}

model TypeStorage {
  id          String   @id @default(uuid())
  name        String // Ejemplo: "Producto Terminado", "Materia Prima", etc.
  description String? // Descripción opcional del tipo de almacén
  branchId    String? // Clave foránea a Sucursal o local
  staffId     String? // Clave foránea a Personal empleado responsable del almacén
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Storage Storage[] // Relación con la tabla Almacen
}

//tabla almacen
model Storage {
  id            String      @id @default(uuid())
  productoId    String
  Producto      Producto    @relation(fields: [productoId], references: [id])
  name          String // Nombre del almacén
  location      String? // Ubicación física del almacén
  typeStorageId String
  TypeStorage   TypeStorage @relation(fields: [typeStorageId], references: [id]) // Relación con TipoAlmacen

  stock Float @default(0) // Stock disponible en este almacén

  Incoming  Incoming[] // Relación con Ingreso
  Outgoing  Outgoing[] // Relación con Salida
  isActive  Boolean    @default(true) // Campo para controlar si está activo o no
  createdAt DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt DateTime   @updatedAt
}

//tabla tipo movimiento
model MovementType {
  id          String     @id @default(uuid())
  orderId     String?
  Order       Order?     @relation(fields: [orderId], references: [id])
  referenceId String? // Referencia a un registro etc
  name        String? // venta, compra, devolución, etc.
  description String? // Descripción opcional del tipo de movimiento
  state       Boolean    @default(false) // Estado que controla si el flujo se concreta o no (false = no afecta al stock)
  isIncoming  Boolean? // Booleano para identificar si es un "Ingreso" o "Salida"
  tipoExterno String? // Puede ser "Venta", "Compra", "Devolución", etc.
  isActive    Boolean    @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime   @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime   @updatedAt
  Movement    Movement[]
}

// tabla movimientos
model Movement {
  id             String        @id @default(uuid())
  movementTypeId String?
  MovementType   MovementType? @relation(fields: [movementTypeId], references: [id])
  incomingId     String?
  Incoming       Incoming?     @relation(fields: [incomingId], references: [id])
  outgoingId     String?
  Outgoing       Outgoing?     @relation(fields: [outgoingId], references: [id])
  productoId     String
  Producto       Producto      @relation(fields: [productoId], references: [id])
  quantity       Float // Cantidad de producto que se movió
  date           DateTime      @default(now()) @db.Timestamptz(6)
  state          Boolean       @default(false) // Estado para registrar si el movimiento ha sido procesado o no
  referenceId    String? // Referencia a un registro etc
  isActive       Boolean       @default(true) // Campo para controlar si está activo o no
  createdAt      DateTime      @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime      @updatedAt
}

//tabla ingresos 
model Incoming {
  id          String   @id @default(uuid())
  name        String?
  description String?
  storageId   String
  Storage     Storage  @relation(fields: [storageId], references: [id])
  date        DateTime @default(now()) @db.Timestamptz(6)
  state       Boolean  @default(false) // Estado que indica si el ingreso es concreto (true) o está en proceso (false)
  referenceId String? // Referencia a un registro etc
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Movement Movement[] // Relación con Movimiento
}

//tabla salidas
model Outgoing {
  id          String   @id @default(uuid())
  name        String?
  description String?
  storageId   String
  Storage     Storage  @relation(fields: [storageId], references: [id])
  date        DateTime @default(now()) @db.Timestamptz(6)
  state       Boolean  @default(false) // Estado que indica si la salida es concreta (true) o está en proceso (false)
  referenceId String? // Referencia a un registro etc
  isActive    Boolean  @default(true) // Campo para controlar si está activo o no
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  Movement Movement[] // Relación con Movimiento
}

//tabla historias
model HistoriaMedica {
  id             String   @id @default(uuid())
  pacienteId     String
  paciente       Paciente @relation(fields: [pacienteId], references: [id])
  historiaMedica Json
  date           DateTime
  description    String?

  isActive       Boolean          @default(true)
  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  UpdateHistoria UpdateHistoria[]
}

//tabla actualizacion ala historia
model UpdateHistoria {
  id               String         @id @default(uuid())
  consultaMedicaId String
  personalId       String
  sucursalId       String
  historiaMedicaId String
  historiaMedica   HistoriaMedica @relation(fields: [historiaMedicaId], references: [id])
  receta           Boolean        @default(false)
  recetaMedicaId   String?
  fecha            DateTime
  updateHistoria   Json
  description      String?
  descansoMedico   Boolean        @default(false)
  descripDescanso  String?

  isActive     Boolean        @default(true)
  createdAt    DateTime       @default(now()) @db.Timestamptz(6)
  updatedAt    DateTime       @updatedAt
  RecetaMedica RecetaMedica[]
}

//tabla recetas medicas
model RecetaMedica {
  // Campos de identificación
  id String @id @default(uuid()) // ID único de la receta

  // Relaciones y referencias
  updateHistoriaId String // ID de la actualización de historia médica
  UpdateHistoria   UpdateHistoria @relation(fields: [updateHistoriaId], references: [id])
  sucursalId       String // ID de la sucursal donde se emite
  personalId       String // ID del personal médico que emite
  pacienteId       String // ID del paciente

  // Datos principales
  fechaRegistro DateTime // Fecha de emisión de la receta
  receta        Json // Detalle de medicamentos y dosificación
  description   String? // Descripción o notas adicionales (opcional)
  ordenCompraId String? // Referencia a orden de compra (opcional)

  // Campos de auditoría
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

//tabla sucursal
model Sucursal {
  id       String  @id @default(uuid())
  name     String
  address  String
  phone    String?
  isActive Boolean @default(true)

  createdAt      DateTime         @default(now()) @db.Timestamptz(6)
  updatedAt      DateTime         @updatedAt
  ConsultaMedica ConsultaMedica[] // Relación con ConsultaMedica
}

//tabla consultas medicas
model ConsultaMedica {
  id         String   @id @default(uuid())
  //realcion tabla servicios
  serviceId  String
  Service    Service  @relation(fields: [serviceId], references: [id])
  //realcion tabla paciente
  pacienteId String
  paciente   Paciente @relation(fields: [pacienteId], references: [id])
  //realcion tabla sucursal
  sucursalId String
  Sucursal   Sucursal @relation(fields: [sucursalId], references: [id])

  description String
  date        DateTime
  createdAt   DateTime @default(now()) @db.Timestamptz(6)
  updatedAt   DateTime @updatedAt

  CitaMedica CitaMedica[] // Relación con CitaMedica
  // OrdenCompra OrdenCompra[] // Relación con OrdenCompra
}

//tabla tipo de citasMedicas
model TipoCitaMedica {
  id          String  @id @default(uuid())
  name        String
  description String?

  createdAt  DateTime     @default(now()) @db.Timestamptz(6)
  updatedAt  DateTime     @updatedAt
  CitaMedica CitaMedica[]
}

//tabla citas medicas
model CitaMedica {
  id               String         @id @default(uuid())
  //relacion con tipo de cita medica
  tipoCitaMedicaId String
  TipoCitaMedica   TipoCitaMedica @relation(fields: [tipoCitaMedicaId], references: [id])
  //relacion con personal
  personalId       String
  personal         Personal       @relation(fields: [personalId], references: [id])
  //relacion con consulta medica
  consultaId       String
  ConsultaMedica   ConsultaMedica @relation(fields: [consultaId], references: [id])

  date        DateTime
  description String

  createdAt           DateTime              @default(now()) @db.Timestamptz(6)
  updatedAt           DateTime              @updatedAt
  ProcedimientoMedico ProcedimientoMedico[]
}

//tabla ProcedimientoMedico
model ProcedimientoMedico {
  id           String     @id @default(uuid())
  //relacion con cita medica
  citaMedicaId String
  CitaMedica   CitaMedica @relation(fields: [citaMedicaId], references: [id])
  name         String
  description  String?

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum OrderType {
  MEDICAL_PRESCRIPTION_ORDER
  MEDICAL_CONSULTATION_ORDER
  PRODUCT_SALE_ORDER
}

enum OrderStatus {
  DRAFT
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
  REFUNDED
}

model Order {
  id             String      @id @default(uuid())
  code           String?
  type           OrderType
  movementTypeId String? // FK para TipoMovimiento
  referenceId    String? // ID of related prescription or consultation
  sourceId       String? // ID de la entidad origen (paciente, etc)
  targetId       String? // ID de la entidad destino (doctor, etc)
  status         OrderStatus
  currency       String // default 'PEN'
  subtotal       Float
  tax            Float
  total          Float
  date           DateTime    @default(now()) @db.Timestamptz(6)
  notes          String?
  metadata       Json? // Metadata adicional específica del tipo
  isActive       Boolean     @default(true)

  // Relations
  payments  Payment[]      @relation("OrderPayments")
  movements MovementType[]

  // Audit fields
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String
  order         Order         @relation("OrderPayments", fields: [orderId], references: [id])
  date          DateTime      @default(now()) @db.Timestamptz(6)
  status        PaymentStatus
  amount        Float
  description   String?
  paymentMethod PaymentMethod // CASH, TRANSFER, YAPE
  voucherNumber String? // Número de comprobante/operación
  verifiedBy    String? // ID del usuario que verificó
  verifiedAt    DateTime? // Cuándo se verificó
  isActive      Boolean       @default(true)

  createdAt DateTime @default(now()) @db.Timestamptz(6)
  updatedAt DateTime @updatedAt
}

enum PaymentMethod {
  CASH
  BANK_TRANSFER
  YAPE
}

enum PaymentStatus {
  PENDING
  PROCESSING
  COMPLETED
  CANCELLED
}
