name: Docker Build and Deploy

on:
  push:
    branches: [ main, stage ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/docker-build-deploy.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set environment variables
        id: env_vars
        run: |
          # Get repository name in lowercase
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_ENV
            echo "SERVER_HOST=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.PROD_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_PRIVATE_KEY=${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.PROD_SSH_PORT || 22 }}" >> $GITHUB_ENV
          else
            echo "ENV_TAG=stage" >> $GITHUB_ENV
            echo "SERVER_HOST=${{ secrets.STAGE_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.STAGE_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_PRIVATE_KEY=${{ secrets.STAGE_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.STAGE_SSH_PORT || 22 }}" >> $GITHUB_ENV
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          cache-to: type=inline
          provenance: false
          sbom: false
          tagswithref: true
          tagswithsha: true

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        id: env_vars
        run: |
          REPO_NAME=$(echo "${{ github.repository }}" | tr '[:upper:]' '[:lower:]')
          echo "REPO_NAME=${REPO_NAME}" >> $GITHUB_ENV
          
          if [[ ${{ github.ref }} == 'refs/heads/main' ]]; then
            echo "ENV_TAG=prod" >> $GITHUB_ENV
            echo "SERVER_HOST=${{ secrets.PROD_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.PROD_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_PRIVATE_KEY=${{ secrets.PROD_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.PROD_SSH_PORT || 22 }}" >> $GITHUB_ENV
          else
            echo "ENV_TAG=stage" >> $GITHUB_ENV
            echo "SERVER_HOST=${{ secrets.STAGE_SERVER_HOST }}" >> $GITHUB_ENV
            echo "SSH_USERNAME=${{ secrets.STAGE_SSH_USERNAME }}" >> $GITHUB_ENV
            echo "SSH_PRIVATE_KEY=${{ secrets.STAGE_SSH_PRIVATE_KEY }}" >> $GITHUB_ENV
            echo "SSH_PORT=${{ secrets.STAGE_SSH_PORT || 22 }}" >> $GITHUB_ENV
          fi
          echo "DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}" >> $GITHUB_ENV

      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ env.SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
          config: |
            Host deployment-target
              HostName ${{ env.SERVER_HOST }}
              User ${{ env.SSH_USERNAME }}
              Port ${{ env.SSH_PORT }}
              StrictHostKeyChecking no

      - name: Update docker-compose on server
        run: |
          ssh deployment-target << 'ENDSSH'
            # Pull new image
            docker pull ${{ env.DOCKER_TAG }}
            
            # Update the API service without affecting others
            cd /path/to/docker-compose
            sed -i "s|image: ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:.*|image: ${{ env.DOCKER_TAG }}|" docker-compose.${{ env.ENV_TAG }}.yml
            
            # Restart only the API service
            docker-compose -f docker-compose.${{ env.ENV_TAG }}.yml up -d --no-deps api
            
            # Cleanup old images
            docker image prune -f
          ENDSSH
