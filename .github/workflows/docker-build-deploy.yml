name: Docker Build and Deploy

on:
  push:
    branches: [ main, stage ]
    paths-ignore:
      - '**.md'
      - '.github/**'
      - '!.github/workflows/docker-build-deploy.yml'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Set environment variables
        run: |
          # Get repository name in lowercase, removing any organization prefix
          REPO_NAME="$(echo "${{ github.repository }}" | sed 's/.*\///' | tr '[:upper:]' '[:lower:]')"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
          
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          else
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          fi

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.ref_name }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          cache-to: type=inline
          provenance: false
          sbom: false

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Set environment variables
        run: |
          REPO_NAME="$(echo "${{ github.repository }}" | sed 's/.*\///' | tr '[:upper:]' '[:lower:]')"
          echo "REPO_NAME=${REPO_NAME}" >> "${GITHUB_ENV}"
          
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          else
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          fi
          echo "DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}" >> "${GITHUB_ENV}"

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PRIVATE_KEY || secrets.STAGE_SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
          config: |
            Host deployment-target
              HostName ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_HOST || secrets.STAGE_SERVER_HOST }}
              User ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_USERNAME || secrets.STAGE_SSH_USERNAME }}
              Port ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PORT || secrets.STAGE_SSH_PORT || 22 }}
              StrictHostKeyChecking no

      - name: Update docker-compose on server
        run: |
          # Crear el script que se ejecutará en el servidor
          REMOTE_SCRIPT=$(cat << 'EOF'
            # Pull new image
            docker pull "__DOCKER_TAG__"
            
            # Update the API service without affecting others
            cd ~/docker/acide/juan-pablo-ii
            
            # Verificar si el archivo docker-compose existe
            if [ ! -f "docker-compose.__ENV_TAG__.yml" ]; then
              echo "Error: docker-compose.__ENV_TAG__.yml not found"
              ls -la
              pwd
              exit 1
            fi
            
            # Hacer backup del archivo docker-compose
            cp "docker-compose.__ENV_TAG__.yml" "docker-compose.__ENV_TAG__.yml.bak"
            
            # Update image in docker-compose file
            sed -i "/image:.*acide-api-jpii/c\    image: __DOCKER_TAG__" "docker-compose.__ENV_TAG__.yml"
            
            # Verificar si el archivo fue modificado correctamente
            if ! grep -q "__DOCKER_TAG__" "docker-compose.__ENV_TAG__.yml"; then
              echo "Error: Failed to update image in docker-compose file"
              cat "docker-compose.__ENV_TAG__.yml"
              # Restaurar el backup
              mv "docker-compose.__ENV_TAG__.yml.bak" "docker-compose.__ENV_TAG__.yml"
              exit 1
            fi
            
            # Restart only the API service
            if command -v docker-compose &> /dev/null; then
              docker-compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps acide-api-jpii
            else
              docker compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps acide-api-jpii
            fi
            
            # Cleanup old images
            docker images -q --filter "dangling=true" | xargs -r docker rmi
            
            # Eliminar el backup si todo salió bien
            rm "docker-compose.__ENV_TAG__.yml.bak"
          EOF
          )

          # Reemplazar los placeholders con los valores reales
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__DOCKER_TAG__/${{ env.DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ENV_TAG__/${{ env.ENV_TAG }}}"

          # Ejecutar el script en el servidor remoto
          echo "$REMOTE_SCRIPT" | ssh deployment-target bash
