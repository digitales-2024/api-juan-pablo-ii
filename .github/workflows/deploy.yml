name: Deploy Service

on:
  push:
    branches: [develop, stage, main]
    tags: ['v*.*.*']
    paths-ignore:
      - '**.md'

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64

      - name: Validate environment variables
        run: |
          if [ -z "${{ vars.PROJECT_NAME }}" ]; then
            echo "Error: PROJECT_NAME must be defined in environment variables"
            exit 1
          fi
          if [ -z "${{ vars.SERVICE_TYPE }}" ]; then
            echo "Error: SERVICE_TYPE must be defined in environment variables"
            exit 1
          fi

      - name: Set environment variables
        run: |
          # Construir el nombre base del servicio
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"

          # Configurar variables según el ambiente
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          elif [[ "${{ github.ref }}" == 'refs/heads/stage' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}-stage" >> "${GITHUB_ENV}"
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          else
            echo "SERVICE_NAME=${BASE_NAME}-dev" >> "${GITHUB_ENV}"
            echo "ENV_TAG=dev" >> "${GITHUB_ENV}"
          fi

          # Configurar nombre del repo para Docker
          echo "REPO_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"

          # Debug info
          echo "SERVICE_NAME: $SERVICE_NAME"
          echo "ENV_TAG: $ENV_TAG"
          echo "REPO_NAME: $REPO_NAME"

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:${{ github.sha }}
            ${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
            ${{ github.ref == 'refs/heads/main' && format('{0}/{1}:latest', secrets.DOCKERHUB_USERNAME, env.REPO_NAME) || '' }}
            ${{ contains(github.ref, 'refs/tags/') && format('{0}/{1}:{2}', secrets.DOCKERHUB_USERNAME, env.REPO_NAME, github.ref_name) || '' }}
          cache-from: type=registry,ref=${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}:latest-${{ env.ENV_TAG }}
          cache-to: type=inline
          provenance: false
          sbom: false

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    environment:
      name: ${{ github.ref == 'refs/heads/main' && 'production' || github.ref == 'refs/heads/stage' && 'staging' || 'development' }}
    steps:
      - name: Set environment variables
        run: |
          # Construir el nombre base del servicio
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"

          # Configurar variables según el ambiente
          if [[ "${{ github.ref }}" == 'refs/heads/main' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
            echo "ENV_TAG=prod" >> "${GITHUB_ENV}"
          elif [[ "${{ github.ref }}" == 'refs/heads/stage' ]]; then
            echo "SERVICE_NAME=${BASE_NAME}-stage" >> "${GITHUB_ENV}"
            echo "ENV_TAG=stage" >> "${GITHUB_ENV}"
          else
            echo "SERVICE_NAME=${BASE_NAME}-dev" >> "${GITHUB_ENV}"
            echo "ENV_TAG=dev" >> "${GITHUB_ENV}"
          fi

          echo "REPO_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"
          echo "DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}/${BASE_NAME}:${{ github.sha }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_DOCKER_TAG=${{ secrets.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}:${{ github.sha }}" >> "${GITHUB_ENV}"
          echo "ESCAPED_IMAGE_NAME=${{ secrets.DOCKERHUB_USERNAME }}\\\\/${BASE_NAME}" >> "${GITHUB_ENV}"

      - name: Configure SSH
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PRIVATE_KEY || secrets.STAGE_SSH_PRIVATE_KEY }}
          known_hosts: unnecessary
          if_key_exists: replace
          config: |
            Host deployment-target
              HostName ${{ github.ref == 'refs/heads/main' && secrets.PROD_SERVER_HOST || secrets.STAGE_SERVER_HOST }}
              User ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_USERNAME || secrets.STAGE_SSH_USERNAME }}
              Port ${{ github.ref == 'refs/heads/main' && secrets.PROD_SSH_PORT || secrets.STAGE_SSH_PORT || 22 }}
              StrictHostKeyChecking no

      - name: Update docker-compose on server
        run: |
          REMOTE_SCRIPT=$(cat << 'EOF'
            # Pull new image
            docker pull "__DOCKER_TAG__"

            # Update the service without affecting others
            cd ${{ vars.SERVICE_HOME }}

            # Verificar permisos y ownership del directorio
            echo "Checking permissions..."
            ls -la
            
            # Asegurarse de tener los permisos necesarios (usar sudo si es necesario)
            if [ ! -w "docker-compose.__ENV_TAG__.yml" ]; then
              echo "No write permission on docker-compose file, attempting to use sudo..."
              
              # Verificar si el archivo docker-compose existe
              if [ ! -f "docker-compose.__ENV_TAG__.yml" ]; then
                echo "Error: docker-compose.__ENV_TAG__.yml not found"
                ls -la
                pwd
                exit 1
              fi

              # Hacer backup del archivo docker-compose usando sudo
              sudo cp "docker-compose.__ENV_TAG__.yml" "docker-compose.__ENV_TAG__.yml.bak"

              # Actualizar la imagen usando un archivo temporal y sudo
              sudo sed -i.tmp -r "s|image: __ESCAPED_IMAGE_NAME__:.+$|image: __ESCAPED_DOCKER_TAG__|" docker-compose.__ENV_TAG__.yml
              
              # Verificar la actualización
              if ! sudo grep -A 2 "container_name: __SERVICE_NAME__" "docker-compose.__ENV_TAG__.yml" | grep -q "image: __ESCAPED_DOCKER_TAG__"; then
                echo "Error: Image update failed"
                sudo mv "docker-compose.__ENV_TAG__.yml.bak" "docker-compose.__ENV_TAG__.yml"
                exit 1
              fi

              # Limpiar archivos temporales
              sudo rm -f "docker-compose.__ENV_TAG__.yml.tmp" "docker-compose.__ENV_TAG__.yml.bak"
            else
              # Si tenemos permisos, ejecutar sin sudo
              cp "docker-compose.__ENV_TAG__.yml" "docker-compose.__ENV_TAG__.yml.bak"
              sed -i.tmp -r "s|image: __ESCAPED_IMAGE_NAME__:.+$|image: __ESCAPED_DOCKER_TAG__|" docker-compose.__ENV_TAG__.yml
              
              if ! grep -A 2 "container_name: __SERVICE_NAME__" "docker-compose.__ENV_TAG__.yml" | grep -q "image: __ESCAPED_DOCKER_TAG__"; then
                echo "Error: Image update failed"
                mv "docker-compose.__ENV_TAG__.yml.bak" "docker-compose.__ENV_TAG__.yml"
                exit 1
              fi

              rm -f "docker-compose.__ENV_TAG__.yml.tmp" "docker-compose.__ENV_TAG__.yml.bak"
            fi

            # Restart service with appropriate permissions
            if command -v docker-compose &> /dev/null; then
              sudo docker-compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            else
              sudo docker compose -f "docker-compose.__ENV_TAG__.yml" up -d --no-deps __SERVICE_NAME__
            fi

            # Cleanup old images (necesita sudo para Docker)
            sudo docker images -q --filter "dangling=true" | xargs -r sudo docker rmi

            # Debug: Verificar estado final
            echo "Service status:"
            if command -v docker-compose &> /dev/null; then
              sudo docker-compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            else
              sudo docker compose -f "docker-compose.__ENV_TAG__.yml" ps __SERVICE_NAME__
            fi
          EOF
          )

          # Reemplazar placeholders
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__DOCKER_TAG__/${{ env.DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_DOCKER_TAG__/${{ env.ESCAPED_DOCKER_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ENV_TAG__/${{ env.ENV_TAG }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__SERVICE_NAME__/${{ env.SERVICE_NAME }}}"
          REMOTE_SCRIPT="${REMOTE_SCRIPT//__ESCAPED_IMAGE_NAME__/${{ env.ESCAPED_IMAGE_NAME }}}"

          # Ejecutar en servidor remoto
          echo "$REMOTE_SCRIPT" | ssh deployment-target bash

  cleanup-dockerhub:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up environment variables
        run: |
          BASE_NAME="${{ vars.SERVICE_TYPE }}-${{ vars.PROJECT_NAME }}"
          echo "REPO_NAME=${BASE_NAME}" >> "${GITHUB_ENV}"

      - name: Delete old untagged images
        uses: actions/delete-package-versions@v4
        with:
          package-name: '${{ env.REPO_NAME }}'
          package-type: 'container'
          min-versions-to-keep: 10
          delete-only-untagged-versions: 'true'
          token: ${{ secrets.DOCKERHUB_TOKEN }}

      # Opcional: Limpiar imágenes antiguas con tags específicos
      - name: Clean up old tagged images
        run: |
          # Obtener todas las imágenes excepto las últimas 10 por ambiente
          EXCLUDE_TAGS="latest|latest-dev|latest-stage|latest-prod"
          for ENV in dev stage prod; do
            # Mantener las últimas 10 imágenes por ambiente
            KEEP_IMAGES=$(docker hub api repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}/tags \
              | jq -r ".results[] | select(.name | contains(\"${ENV}\")) | .name" \
              | grep -v -E "${EXCLUDE_TAGS}" \
              | sort -r \
              | tail -n +11)
            
            # Eliminar imágenes antiguas
            for TAG in $KEEP_IMAGES; do
              echo "Deleting old image: $TAG"
              docker hub api repositories/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.REPO_NAME }}/tags/$TAG \
                -X DELETE || true
            done
          done
